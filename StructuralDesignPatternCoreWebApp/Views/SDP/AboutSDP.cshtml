
@{
    ViewData["Title"] = "SDP";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<h1>Design Pattern</h1>
<p>A pattern is a recurring solution to a problem in a context.</p>
<p>Each pattern describes a problem that occurs over and over again in our environment, and then describes the core of the solution to that problem, in such a way that you can use this solution a million times over, without ever doing it the same way twice.</p>
<p>The 23 Gang of Four (GoF) patterns are generally considered the foundation for all other patterns.</p>
<p data-toggle="collapse" data-target="#divDPImage">Images :</p>
<div id="divDPImage" class="carousel slide collapse" data-ride="carousel">
    <ol class="carousel-indicators">
        <li data-target="#divDPImage" data-slide-to="0" class="active"></li>
        <li data-target="#divDPImage" data-slide-to="1"></li>
        <li data-target="#divDPImage" data-slide-to="2"></li>
        <li data-target="#divDPImage" data-slide-to="3"></li>

    </ol>
    <!-- Wrapper for slides -->
    <div class="carousel-inner">
        <div class="item active">
            <img src="~/Images/1a Design Pattern.jpg" alt="Design Pattern" />
        </div>
        <div class="item">
            <img src="~/Images/1b Design Patterns.jpg" alt="Design Pattern" />
        </div>
        <div class="item active">
            <img src="~/Images/1c DP.png" alt="Design Pattern" />
        </div>
        <div class="item active">
            <img src="~/Images/1d DP.jpg" alt="Design Pattern" />
        </div>
    </div>
    <a class="left carousel-control" href="#divDPImage" data-slide="prev">
        <span class="glyphicon glyphicon-chevron-left"></span>
        <span class="sr-only">Previous</span>
    </a>
    <a class="right carousel-control" href="#divDPImage" data-slide="next">
        <span class="glyphicon glyphicon-chevron-right"></span>
        <span class="sr-only">Next</span>
    </a>
</div>
<h2 data-toggle="collapse" data-target="#OlCDP">Creational Design Patterns</h2>
<ol id="OlCDP" class="collapse">
    The design patterns that deal with the creation of an object.
    <li>
        Factory Method
    </li>
    <li>
        Abstract Factory
    </li>
    <li>
        Builder
    </li>
    <li>
        Prototype
    </li>
    <li>
        Singleton
    </li>

    @*<li>
            <a href="https://www.dofactory.com/net/factory-method-design-pattern">
                Factory Method
            </a>
        </li>
        <li>
            <a href="https://www.dofactory.com/net/abstract-factory-design-pattern">
                Abstract Factory
            </a>
        </li>
        <li>
            <a href="https://www.dofactory.com/net/builder-design-pattern">
                Builder
            </a>
        </li>
        <li>
            <a href="https://www.dofactory.com/net/prototype-design-pattern">
                Prototype
            </a>
        </li>
        <li>
            <a href="https://www.dofactory.com/net/singleton-design-pattern">
                Singleton
            </a>
        </li>*@
</ol>
<h2 data-toggle="collapse" data-target="#OlSDP">Structural Design Patterns</h2>
@*<ol id="OlSDP" class="collapse">*@
<ol id="OlSDP">
    The design patterns in this category deals with the class structure such as
    <a href="https://www.c-sharpcorner.com/UploadFile/9582c9/inheritance-with-example-in-C-Sharp/">Inheritance</a> and
    <a href="https://www.c-sharpcorner.com/article/difference-between-composition-and-aggregation/" target="_blank" onclick="window.open('https://www.tutorialspoint.com/Association-Composition-and-Aggregation-in-Chash');">Composition</a>.
    <li>
        <a asp-area="" asp-controller="SDP" asp-action="AdapterSDP">Adapter</a>
        : Match interfaces of different classes
    </li>
    <li>
        <a asp-area="" asp-controller="SDP" asp-action="BridgeSDP">Bridge</a>
        : Separates an object’s interface from its implementation
    </li>
    <li>
        <a asp-area="" asp-controller="SDP" asp-action="CompositeSDP">Composite</a>
        : A tree structure of simple and composite objects
    </li>
    <li>
        <a asp-area="" asp-controller="SDP" asp-action="DecoratorSDP">Decorator</a>
        : Add responsibilities to objects dynamically
    </li>
    <li>
        <a asp-area="" asp-controller="SDP" asp-action="FacadeSDP">Facade</a>
        : A single class that represents an entire subsystem
    </li>
    <li>
        <a asp-area="" asp-controller="SDP" asp-action="FlyweightSDP">Flyweight</a>
        : A fine-grained instance used for efficient sharing
    </li>
    <li>
        <a asp-area="" asp-controller="SDP" asp-action="ProxySDP">Proxy</a>
        : An object representing another object
    </li>
</ol>
<h2 data-toggle="collapse" data-target="#OlBDP">Behavioral  Design Patterns</h2>
<ol id="OlBDP" class="collapse">
    This type of design patterns provide solution for the better interaction between objects, how to provide lose coupling, and flexibility to extend easily in future.
    <li>
        Chain of Responsibility
    </li>
    <li>
        Command
    </li>
    <li>
        Interpreter
    </li>
    <li>
        Iterator
    </li>
    <li>
        Mediator
    </li>
    <li>
        Memento
    </li>
    <li>
        Observer
    </li>
    <li>
        State
    </li>
    <li>
        Strategy
    </li>
    <li>
        Visitor
    </li>
    <li>
        Template Method
    </li>


    @*<li>
            <a href="https://www.dofactory.com/net/chain-of-responsibility-design-pattern">
                Chain of Responsibility
            </a>
        </li>
        <li>
            <a href="https://www.dofactory.com/net/command-design-pattern">
                Command
            </a>
        </li>
        <li>
            <a href="https://www.dofactory.com/net/interpreter-design-pattern">
                Interpreter
            </a>
        </li>
        <li>
            <a href="https://www.dofactory.com/net/iterator-design-pattern">
                Iterator
            </a>
        </li>
        <li>
            <a href="https://www.dofactory.com/net/mediator-design-pattern">
                Mediator
            </a>
        </li>
        <li>
            <a href="https://www.dofactory.com/net/memento-design-pattern">
                Memento
            </a>
        </li>
        <li>
            <a href="https://www.dofactory.com/net/observer-design-pattern">
                Observer
            </a>
        </li>
        <li>
            <a href="https://www.dofactory.com/net/state-design-pattern">
                State
            </a>
        </li>
        <li>
            <a href="https://www.dofactory.com/net/strategy-design-pattern">
                Strategy
            </a>
        </li>
        <li>
            <a href="https://www.dofactory.com/net/Visitor-design-pattern">
                Visitor
            </a>
        </li>
        <li>
            <a href="https://www.dofactory.com/net/template-method-design-pattern">
                Template Method
            </a>
        </li>*@
</ol>